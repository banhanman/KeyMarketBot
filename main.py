import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect('keys.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    price INTEGER NOT NULL,
    category TEXT
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS keys (
    id INTEGER PRIMARY KEY,
    product_id INTEGER,
    key TEXT UNIQUE,
    is_used INTEGER DEFAULT 0,
    FOREIGN KEY(product_id) REFERENCES products(id)
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    product_id INTEGER,
    key_id INTEGER,
    amount INTEGER,
    status TEXT DEFAULT 'new',
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)''')
conn.commit()

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class OrderState(StatesGroup):
    waiting_for_product = State()
    confirm_payment = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("ü™ü Windows", callback_data="cat_windows"),
        InlineKeyboardButton("üìä Office", callback_data="cat_office"),
        InlineKeyboardButton("üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="my_orders"),
        InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    ]
    keyboard.add(*buttons)
    
    await message.answer(
        "üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ KeyMarketBot!\n\n"
        "‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
        "‚Ä¢ Microsoft Windows\n"
        "‚Ä¢ Microsoft Office\n\n"
        "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
        "üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –∑–∞–º–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query_handler(lambda c: c.data.startswith('cat_'))
async def process_category(callback_query: types.CallbackQuery):
    category = callback_query.data.split('_')[1]
    cursor.execute("SELECT id, name, price FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    
    keyboard = InlineKeyboardMarkup()
    for product in products:
        keyboard.add(InlineKeyboardButton(
            f"{product[1]} - {product[2]}‚ÇΩ", 
            callback_data=f"prod_{product[0]}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.upper()}:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda c: c.data.startswith('prod_'))
async def process_product(callback_query: types.CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    
    if not product:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    async with state.proxy() as data:
        data['product_id'] = product_id
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data="buy_now"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"cat_{product[4]}"))
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"<b>{product[1]}</b>\n\n{product[2]}\n\n–¶–µ–Ω–∞: <b>{product[3]}‚ÇΩ</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text="buy_now", state="*")
async def process_buy(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        product_id = data['product_id']
    
    cursor.execute("SELECT * FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title=product[1],
        description=product[2],
        payload=f"order_{product_id}",
        provider_token=config.PAYMENT_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label=product[1], amount=product[3]*100)],
        start_parameter="keymarket",
        photo_url="https://via.placeholder.com/400/008000/FFFFFF?text=KeyMarket",
        photo_size=512
    )
    await OrderState.confirm_payment.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.pre_checkout_query_handler(state=OrderState.confirm_payment)
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT, state=OrderState.confirm_payment)
async def process_successful_payment(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = message.successful_payment
    product_id = int(payment.invoice_payload.split('_')[1])
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á
    cursor.execute("SELECT id, key FROM keys WHERE product_id = ? AND is_used = 0 LIMIT 1", (product_id,))
    key_data = cursor.fetchone()
    
    if key_data:
        key_id, key_value = key_data
        # –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        cursor.execute("UPDATE keys SET is_used = 1 WHERE id = ?", (key_id,))
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
        cursor.execute(
            "INSERT INTO orders (user_id, product_id, key_id, amount) VALUES (?, ?, ?, ?)",
            (message.from_user.id, product_id, key_id, payment.total_amount // 100)
        )
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–í–∞—à –∫–ª—é—á: <code>{key_value}</code>\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
            "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –í–≤–µ–¥–∏—Ç–µ: <code>slmgr /ipk –≤–∞—à_–∫–ª—é—á</code>\n"
            "3. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <code>slmgr /skms kms8.msguides.com</code>\n"
            "4. –ó–∞—Ç–µ–º: <code>slmgr /ato</code>\n\n"
            "üì¨ –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (/orders)",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )
    
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(commands=['orders'])
async def show_orders(message: types.Message):
    cursor.execute(
        "SELECT o.id, p.name, k.key, o.timestamp "
        "FROM orders o "
        "JOIN products p ON o.product_id = p.id "
        "JOIN keys k ON o.key_id = k.id "
        "WHERE o.user_id = ? ORDER BY o.timestamp DESC",
        (message.from_user.id,)
    )
    orders = cursor.fetchall()
    
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
        return
    
    response = "üõí –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:\n\n"
    for order in orders:
        response += f"üìÖ {order[3]}\nüõí {order[1]}\nüîë <code>{order[2]}</code>\n\n"
    
    await message.answer(response, parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
